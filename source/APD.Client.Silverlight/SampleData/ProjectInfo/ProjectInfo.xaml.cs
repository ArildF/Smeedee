//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.ProjectInfo
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class ProjectInfo { }
#else

	public class ProjectInfo : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public ProjectInfo()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/APD.Client.Silverlight;component/SampleData/ProjectInfo/ProjectInfo.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Builds _Builds = new Builds();

		public Builds Builds
		{
			get
			{
				return this._Builds;
			}
		}
	}

	public class BuildsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Trigger = string.Empty;

		public string Trigger
		{
			get
			{
				return this._Trigger;
			}

			set
			{
				if (this._Trigger != value)
				{
					this._Trigger = value;
					this.OnPropertyChanged("Trigger");
				}
			}
		}

		private bool _Status = false;

		public bool Status
		{
			get
			{
				return this._Status;
			}

			set
			{
				if (this._Status != value)
				{
					this._Status = value;
					this.OnPropertyChanged("Status");
				}
			}
		}

		private string _StartTime = string.Empty;

		public string StartTime
		{
			get
			{
				return this._StartTime;
			}

			set
			{
				if (this._StartTime != value)
				{
					this._StartTime = value;
					this.OnPropertyChanged("StartTime");
				}
			}
		}

		private string _FinishedTime = string.Empty;

		public string FinishedTime
		{
			get
			{
				return this._FinishedTime;
			}

			set
			{
				if (this._FinishedTime != value)
				{
					this._FinishedTime = value;
					this.OnPropertyChanged("FinishedTime");
				}
			}
		}
	}

	public class Builds : System.Collections.ObjectModel.ObservableCollection<BuildsItem>
	{ 
	}
#endif
}
