//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.EditSlideshowDialogSampleDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class EditSlideshowDialogSampleDataSource { }
#else

	public class EditSlideshowDialogSampleDataSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public EditSlideshowDialogSampleDataSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/Smeedee.Client.Framework.SL;component/SampleData/EditSlideshowDialogSampleDataSource/EditSlideshowDialogSampleDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Slideshow _Slideshow = new Slideshow();

		public Slideshow Slideshow
		{
			get
			{
				return this._Slideshow;
			}

			set
			{
				if (this._Slideshow != value)
				{
					this._Slideshow = value;
					this.OnPropertyChanged("Slideshow");
				}
			}
		}
	}

	public class Slideshow : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private Slides _Slides = new Slides();

		public Slides Slides
		{
			get
			{
				return this._Slides;
			}
		}
	}

	public class SlidesItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private System.Windows.Media.ImageSource _Thumbnail = null;

		public System.Windows.Media.ImageSource Thumbnail
		{
			get
			{
				return this._Thumbnail;
			}

			set
			{
				if (this._Thumbnail != value)
				{
					this._Thumbnail = value;
					this.OnPropertyChanged("Thumbnail");
				}
			}
		}
	}

	public class Slides : System.Collections.ObjectModel.ObservableCollection<SlidesItem>
	{ 
	}
#endif
}
