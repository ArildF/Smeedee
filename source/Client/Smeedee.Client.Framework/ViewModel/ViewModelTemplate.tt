<#@ assembly name="$(SolutionDir)..\Tools\TinyMVVM\TinyMVVM.dll" #>
<#@ import namespace="TinyMVVM.DSL.TextParser" #>
<#@ import namespace="TinyMVVM.SemanticModel.MVVM" #>

<#+
// <copyright file="ViewModel.tt" company="eXPerience">
//  Copyright © eXPerience. All Rights Reserved.
// </copyright>

public class ViewModelTemplate : Template
{
	public string File;
	public string Namespace;

	public override string TransformText()
	{
		Parser parser = new Parser();
		ModelSpecification modelSpec = parser.Parse(Code.FromFile(File));

	#>

using TinyMVVM.Framework.Services;
using TinyMVVM.Framework.Conventions;
<#+ foreach (string Using in modelSpec.Usings) {#>
using <#= Using #>;
<#+ }#>


<#+ foreach (ViewModel viewModel in modelSpec.ViewModels) {#>
namespace <#= viewModel.Namespace #>
{
	public partial class <#= viewModel.Name#> : <#= viewModel.Parent#>
	{
		//State
	<#+ foreach (ViewModelProperty property in viewModel.Properties) {#>
<#+ foreach (string attribute in property.Attributes) {#>
	<#= attribute #>
	<#+ }#>
	<#+ if (property.IsObservable) {#>
public virtual <#= property.Type#> <#= property.Name#>
		{
			get 
			{
				OnGet<#= property.Name#>(ref _<#= property.Name#>);
				 
				return _<#= property.Name#>; 
			}
			set
			{
				if (value != _<#= property.Name#>)
				{
					OnSet<#= property.Name#>(ref value); 
					_<#= property.Name#> = value;
					TriggerPropertyChanged("<#= property.Name#>");
				}
			}
		}
		private <#= property.Type#> _<#= property.Name#>;

		partial void OnGet<#= property.Name#>(ref <#= property.Type#> value);
		partial void OnSet<#= property.Name#>(ref <#= property.Type#> value);

	<#+ }#>
<#+ if (!property.IsObservable){#>
public virtual <#= property.Type#> <#= property.Name#> 
		{ 
			get
			{
				OnGet<#= property.Name#>(ref _<#= property.Name#>);
				 
				return _<#= property.Name#>; 
			}
			set 
			{
				OnSet<#= property.Name#>(ref value); 
				_<#= property.Name #> = value; 
			} 
		}

		private <#= property.Type#> _<#= property.Name#>;
		partial void OnGet<#= property.Name#>(ref <#= property.Type#> value);
		partial void OnSet<#= property.Name#>(ref <#= property.Type#> value);
	<#+ }#>
<#+ }#>

		
		//Commands
	<#+ foreach (ViewModelCommand command in viewModel.Commands) {#>
	public DelegateCommand <#= command.Name#> { get; set; }
	<#+ }#>
	
		public <#= viewModel.Name#>()
		{
	<#+ foreach (ViewModelCommand command in viewModel.Commands) {#>
		<#= command.Name#> = new DelegateCommand();
	<#+ }#>

			OnInitialize();
			ApplyConvention(new BindCommandsDelegatesToMethods());
		}

		partial void OnInitialize();
	}
}

<#+ }#>
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
