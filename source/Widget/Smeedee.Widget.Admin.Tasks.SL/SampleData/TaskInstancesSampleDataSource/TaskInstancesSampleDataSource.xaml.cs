//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.TaskInstancesSampleDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class TaskInstancesSampleDataSource { }
#else

	public class TaskInstancesSampleDataSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public TaskInstancesSampleDataSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/Smeedee.Widget.Admin.Tasks.SL;component/SampleData/TaskInstancesSampleDataSource/TaskInstancesSampleDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private TaskInstances _TaskInstances = new TaskInstances();

		public TaskInstances TaskInstances
		{
			get
			{
				return this._TaskInstances;
			}
		}
	}

	public class TaskInstancesItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _InstanceName = string.Empty;

		public string InstanceName
		{
			get
			{
				return this._InstanceName;
			}

			set
			{
				if (this._InstanceName != value)
				{
					this._InstanceName = value;
					this.OnPropertyChanged("InstanceName");
				}
			}
		}
	}

	public class TaskInstances : System.Collections.ObjectModel.ObservableCollection<TaskInstancesItem>
	{ 
	}
#endif
}
