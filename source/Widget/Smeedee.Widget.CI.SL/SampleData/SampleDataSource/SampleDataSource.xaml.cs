//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleDataSource { }
#else

	public class SampleDataSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleDataSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/Smeedee.Client.Widget.CI.SL;component/SampleData/SampleDataSource/SampleDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private CollectionItemCollection _Data = new CollectionItemCollection();

		public CollectionItemCollection Data
		{
			get
			{
				return this._Data;
			}
		}
	}

	public class CollectionItemCollection : System.Collections.ObjectModel.ObservableCollection<CollectionItem>
	{ 
	}

	public class CollectionItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private LatestBuild _LatestBuild = new LatestBuild();

		public LatestBuild LatestBuild
		{
			get
			{
				return this._LatestBuild;
			}

			set
			{
				if (this._LatestBuild != value)
				{
					this._LatestBuild = value;
					this.OnPropertyChanged("LatestBuild");
				}
			}
		}

		private string _ProjectName = string.Empty;

		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}

			set
			{
				if (this._ProjectName != value)
				{
					this._ProjectName = value;
					this.OnPropertyChanged("ProjectName");
				}
			}
		}

		private string _Status = string.Empty;

		public string Status
		{
			get
			{
				return this._Status;
			}

			set
			{
				if (this._Status != value)
				{
					this._Status = value;
					this.OnPropertyChanged("Status");
				}
			}
		}
	}

	public class LatestBuild : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private ComplexPropertyType2 _TriggeredBy = new ComplexPropertyType2();

		public ComplexPropertyType2 TriggeredBy
		{
			get
			{
				return this._TriggeredBy;
			}

			set
			{
				if (this._TriggeredBy != value)
				{
					this._TriggeredBy = value;
					this.OnPropertyChanged("TriggeredBy");
				}
			}
		}
	}

	public class ComplexPropertyType2 : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _Email = string.Empty;

		public string Email
		{
			get
			{
				return this._Email;
			}

			set
			{
				if (this._Email != value)
				{
					this._Email = value;
					this.OnPropertyChanged("Email");
				}
			}
		}

		private System.Windows.Media.ImageSource _ImageUrl = null;

		public System.Windows.Media.ImageSource ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}

			set
			{
				if (this._ImageUrl != value)
				{
					this._ImageUrl = value;
					this.OnPropertyChanged("ImageUrl");
				}
			}
		}
	}
#endif
}
