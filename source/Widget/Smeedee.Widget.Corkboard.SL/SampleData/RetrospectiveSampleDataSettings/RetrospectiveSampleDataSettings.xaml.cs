//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.RetrospectiveSampleDataSettings
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class RetrospectiveSampleDataSettings { }
#else

	public class RetrospectiveSampleDataSettings : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public RetrospectiveSampleDataSettings()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/Smeedee.Widget.Corkboard.SL;component/SampleData/RetrospectiveSampleDataSettings/RetrospectiveSampleDataSettings.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Pros _Pros = new Pros();

		public Pros Pros
		{
			get
			{
				return this._Pros;
			}

			set
			{
				if (this._Pros != value)
				{
					this._Pros = value;
					this.OnPropertyChanged("Pros");
				}
			}
		}

		private Cons _Cons = new Cons();

		public Cons Cons
		{
			get
			{
				return this._Cons;
			}

			set
			{
				if (this._Cons != value)
				{
					this._Cons = value;
					this.OnPropertyChanged("Cons");
				}
			}
		}
	}

	public class Pros : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private Data _Data = new Data();

		public Data Data
		{
			get
			{
				return this._Data;
			}
		}
	}

	public class Data : System.Collections.ObjectModel.ObservableCollection<DataItem>
	{ 
	}

	public class DataItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Description = string.Empty;

		public string Description
		{
			get
			{
				return this._Description;
			}

			set
			{
				if (this._Description != value)
				{
					this._Description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
	}

	public class Cons : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private Data1 _Data = new Data1();

		public Data1 Data
		{
			get
			{
				return this._Data;
			}
		}
	}

	public class Data1 : System.Collections.ObjectModel.ObservableCollection<DataItem1>
	{ 
	}

	public class DataItem1 : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Description = string.Empty;

		public string Description
		{
			get
			{
				return this._Description;
			}

			set
			{
				if (this._Description != value)
				{
					this._Description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
	}
#endif
}
