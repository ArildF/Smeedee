//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SourceControlViewModelSampleDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SourceControlViewModelSampleDataSource { }
#else

	public class SourceControlViewModelSampleDataSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SourceControlViewModelSampleDataSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/Smeedee.Widget.Standard;component/SampleData/SourceControlViewModelSampleDataSource/SourceControlViewModelSampleDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Changesets _Changesets = new Changesets();

		public Changesets Changesets
		{
			get
			{
				return this._Changesets;
			}
		}
	}

	public class ChangesetsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Comment = string.Empty;

		public string Comment
		{
			get
			{
				return this._Comment;
			}

			set
			{
				if (this._Comment != value)
				{
					this._Comment = value;
					this.OnPropertyChanged("Comment");
				}
			}
		}

		private string _Time = string.Empty;

		public string Time
		{
			get
			{
				return this._Time;
			}

			set
			{
				if (this._Time != value)
				{
					this._Time = value;
					this.OnPropertyChanged("Time");
				}
			}
		}

		private double _Revision = 0;

		public double Revision
		{
			get
			{
				return this._Revision;
			}

			set
			{
				if (this._Revision != value)
				{
					this._Revision = value;
					this.OnPropertyChanged("Revision");
				}
			}
		}

		private System.Windows.Media.ImageSource _AvatarUrl = null;

		public System.Windows.Media.ImageSource AvatarUrl
		{
			get
			{
				return this._AvatarUrl;
			}

			set
			{
				if (this._AvatarUrl != value)
				{
					this._AvatarUrl = value;
					this.OnPropertyChanged("AvatarUrl");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
	}

	public class Changesets : System.Collections.ObjectModel.ObservableCollection<ChangesetsItem>
	{ 
	}
#endif
}
